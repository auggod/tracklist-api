// Generated by LiveScript 1.4.0
(function(){
  var mongoose, LocalStrategy, SoundCloudStrategy, User;
  mongoose = require('mongoose');
  LocalStrategy = require('passport-local').Strategy;
  SoundCloudStrategy = require('passport-soundcloud').Strategy;
  User = require('../models/user');
  module.exports = function(passport, config){
    passport.serializeUser(function(user, done){
      return done(null, user.id);
    });
    passport.deserializeUser(function(id, done){
      return User.findOne({
        _id: id
      }, function(err, user){
        return done(err, user);
      });
    });
    passport.use(new LocalStrategy({
      usernameField: 'username',
      passwordField: 'password'
    }, function(username, password, done){
      return User.findOne({
        username: username
      }, function(err, user){
        if (err) {
          return done(err);
        }
        if (!user) {
          return done(null, false, {
            message: 'Unknown user'
          });
        }
        if (!user.authenticate(password)) {
          return done(null, false, {
            message: 'Invalid password'
          });
        }
        return done(null, user);
      });
    }));
    return passport.use(new SoundCloudStrategy({
      clientID: config.soundcloud.clientID,
      clientSecret: config.soundcloud.clientSecret,
      callbackURL: config.soundcloud.callbackURL
    }, function(accessToken, refreshToken, profile, done){
      return User.findOne({
        'soundcloud.id': profile.id
      }, function(err, user){
        if (!user) {
          user = new User({
            name: profile.displayName,
            email: profile.emails[0].value,
            username: profile.username,
            provider: 'soundcloud',
            soundcloud: profile._json
          });
          return user.save(function(err){
            if (err) {
              console.log(err);
            }
            return done(err, user);
          });
        } else {
          if (user) {
            return done(err, user);
          }
        }
      });
    }));
  };
}).call(this);
