// Generated by LiveScript 1.4.0
(function(){
  var logger, session, cookieParser, bodyParser, compress, errorhandler, mongoStore;
  logger = require('morgan');
  session = require('express-session');
  cookieParser = require('cookie-parser');
  bodyParser = require('body-parser');
  compress = require('compression');
  errorhandler = require('errorhandler');
  mongoStore = require('connect-mongo')(session);
  module.exports = function(app, config, env, passport){
    var climate, secret;
    climate = process.env.NODE_ENV || env.get('TRACKLIST_ENV');
    app.disable('x-powered-by');
    /*
    app.use (req, res, next) ->
      res.header 'x-powered-by', env.get('TRACKLIST_POWERED_BY')
      next!
    */
    app.use(compress({
      filter: function(req, res){
        return /json|text|javascript|css/.test(res.getHeader('Content-Type'));
      },
      threshold: 512
    }));
    app.use(function(req, res, next){
      res.locals.env = app.get('env');
      return next();
    });
    if (process.env.NODE_ENV !== 'test') {
      app.use(logger('dev'));
    }
    if (climate === 'development') {
      app.use(errorhandler({
        dumpExceptions: true,
        showStack: true
      }));
      app.locals.pretty = true;
    }
    if (climate === 'production') {
      app.use(errorhandler({
        dumpExceptions: false,
        showStack: false
      }));
    }
    app.set('view engine', 'jade');
    app.locals.pretty = false;
    app.use(cookieParser());
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
      extended: true
    }));
    secret = env.get('TRACKLIST_SESSION_SECRET');
    app.use(session({
      secret: secret,
      resave: true,
      saveUninitialized: true,
      key: 'sid',
      store: new mongoStore({
        url: config.db,
        collection: 'sessions'
      }),
      cookie: {
        httpOnly: true
      }
    }));
    app.use(passport.initialize());
    app.use(passport.session());
    return app.use(function(req, res, next){
      res.setHeader('X-UA-Compatible', 'IE=Edge,chrome=1');
      return next();
    });
  };
}).call(this);
