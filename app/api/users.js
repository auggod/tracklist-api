// Generated by LiveScript 1.4.0
(function(){
  var mongoose, _, utils, Label, User;
  mongoose = require('mongoose');
  _ = require('lodash');
  utils = require('../lib/utils');
  Label = require('../models/label');
  User = require('../models/user');
  module.exports = {
    create: function(req, res, next){
      var user;
      user = new User(req.body);
      user.provider = 'local';
      return user.save(function(err){
        if (err) {
          return res.send(500, JSON.stringify({
            errors: utils.errors(err.errors)
          }));
        }
        return req.logIn(user, function(err){
          if (err) {
            return next(err);
          }
          return res.send(200, JSON.stringify('Successfully logged in'));
        });
      });
    },
    show: function(req, res){
      var findUser;
      findUser = function(userId){
        return User.findOne({
          _id: userId
        }).select('username role email name avatar lang label account_type').exec(function(err, user){
          return res.json(user);
        });
      };
      console.log(req.session);
      return mongoose.connection.db.collection('sessions', function(err, collection){
        return collection.findOne({
          '_id': req.headers['x-tracklist-session-id']
        }, function(err, res){
          var session;
          session = JSON.parse(res.session);
          console.log(session.passport.user);
          return findUser(session.passport.user);
        });
      });
    },
    list: function(req, res){
      var perPage, page;
      if (!req.session.passport.user) {
        return res.status(401).send({
          error: 'User is not logged in'
        });
      }
      perPage = 10;
      page = req.param('page') > 0 ? req.param('page') : 0;
      return User.find({}).select('username role email name avatar lang label account_type').skip(perPage * page).exec(function(err, users){
        return User.count().exec(function(err, count){
          return res.json({
            users: users,
            page: page,
            pages: count / perPage
          });
        });
      });
    },
    update: function(req, res, next){
      return User.findOne({
        username: req.params.username
      }).select('username email name avatar lang label account_type').exec(function(err, user){
        if (err) {
          return next(err);
        }
        if (req.body.label) {
          return console.log(req.body.label.name);
        }
      });
    },
    remove: function(req, res, next){
      return User.findOne({
        username: req.params.username
      }).exec(function(err, user){
        if (err) {
          return next(err);
        }
        return user.remove(function(err){
          if (err) {
            return res.json(err);
          }
          return res.json(user);
        });
      });
    },
    login: function(req, res){
      return res.send();
    },
    signin: function(req, res){},
    authCallback: this.login,
    auth: function(req, res, next){
      return User.findOne({
        _id: req.session.passport.user
      }).exec(function(err, usr){
        if (err) {
          return next(err);
        }
        if (!usr) {
          return res.send(401, {
            message: 'User is not logged'
          });
        }
        if (usr) {
          return res.json({
            sessionId: req.sessionID,
            userId: usr._id,
            userRole: usr.role,
            username: usr.username
          });
        }
      });
    },
    logout: function(req, res){
      req.logout();
      return res.redirect('/login');
    },
    session: this.login
  };
}).call(this);
