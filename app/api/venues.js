// Generated by LiveScript 1.4.0
(function(){
  var Venue;
  Venue = require('../models/venue');
  module.exports = {
    list: function(req, res, next){
      var q;
      q = req.params.q || req.query.q;
      if (q != null) {
        Venue.search({
          "multi_match": {
            "fields": ["name"],
            "query": q,
            "fuzziness": "AUTO"
          }
        }, {
          hydrate: true,
          hydrateOptions: {
            select: 'id name slug'
          }
        }, function(err, results){
          var data, i$, ref$, len$, item;
          data = [];
          if (results) {
            for (i$ = 0, len$ = (ref$ = results.hits.hits).length; i$ < len$; ++i$) {
              item = ref$[i$];
              data.push(item);
            }
          }
          return res.json(data);
        });
        return;
      }
      return Venue.find().select('-events -artists').exec(function(err, venues){
        if (err) {
          return next(err);
        }
        return res.json({
          venues: venues
        });
      });
    },
    create: function(req, res, next){
      var venue;
      return venue = new Venue({
        name: req.body.name
      }).save(function(err, venue){
        if (err) {
          return next(err);
        }
        return res.json(venue);
      });
    },
    update: function(req, res, next){
      return Venue.findOneAndUpdate({
        id: req.params.id
      }, req.body, {
        upsert: true
      }, function(err, venue){
        if (err) {
          return next(err);
        }
        return res.json(venue);
      });
    },
    show: function(req, res, next){
      return Venue.findOne({
        permalink: req.params.permalink
      }).populate({
        path: 'events._event'
      }).exec(function(err, venue){
        if (err) {
          return next(err);
        }
        return res.json(venue);
      });
    },
    remove: function(req, res, next){
      return Venue.remove({
        id: req.params.id
      }).exec(function(err, venue){
        if (err) {
          return next(err);
        }
      });
    }
  };
}).call(this);
