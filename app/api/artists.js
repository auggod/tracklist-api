// Generated by LiveScript 1.4.0
(function(){
  var mongoose, async, _, Artist, Label, User;
  mongoose = require('mongoose');
  async = require('async');
  _ = require('lodash');
  Artist = require('../models/artist');
  Label = require('../models/label');
  User = require('../models/user');
  module.exports = {
    list: function(req, res, next){
      var q;
      q = req.params.q || req.query.q;
      if (q != null) {
        Artist.search({
          "multi_match": {
            "fields": ["name", "label.name"],
            "query": q,
            "fuzziness": "AUTO"
          }
        }, {
          hydrate: true,
          hydrateOptions: {
            select: 'id name slug'
          }
        }, function(err, results){
          var data, i$, ref$, len$, item;
          data = [];
          if (results) {
            for (i$ = 0, len$ = (ref$ = results.hits.hits).length; i$ < len$; ++i$) {
              item = ref$[i$];
              data.push(item);
            }
          }
          return res.json(data);
        });
        return;
      }
      return Artist.find().sort({
        updatedAt: -1
      }).exec(function(err, artists){
        if (err) {
          return next(err);
        }
        return res.json({
          artists: artists
        });
      });
    },
    create: function(req, res, next){
      var filter, batch, artist;
      filter = function(artists, data){
        data == null && (data = []);
        return Artist.find({
          name: {
            $in: artists
          }
        }).exec(function(err, artists){
          if (err) {
            return next(err);
          }
          return console.log(artists);
        });
      };
      batch = function(artists){
        return Artist.create(artists, function(err, data){
          if (err) {
            return next(err);
          }
          return data;
        });
      };
      if (req.body.artists != null && _.isArray(req.body.artists)) {
        return async.each(req.body.artists, function(item, callback){
          return Artist.findOne({
            name: item
          }).exec(function(err, results){
            var artist;
            if (err) {
              return next(err);
            }
            if (results) {
              return Artist.update({
                name: item
              }, {
                $addToSet: {
                  labels: req.body.common.label
                }
              }, {
                upsert: true,
                safe: true
              }).exec(function(err){
                if (err) {
                  return callback(err);
                }
                return callback();
              });
            } else {
              return artist = new Artist({
                name: item,
                slug: item,
                label: {
                  name: req.body.common.label
                },
                labels: [req.body.common.label]
              }).save(function(err, artist){
                if (err) {
                  return callback(err);
                }
                return callback();
              });
            }
          });
        }, function(err){
          if (err) {
            return console.log('Something failed to process');
          }
          console.log('All artists have been processed successfully');
          return res.sendStatus(201);
        });
      } else {
        return artist = new Artist({
          name: req.body.name,
          slug: req.body.name,
          label: {
            name: req.body.common.label
          },
          labels: [req.body.common.label]
        }).save(function(err, artist){
          if (err) {
            return next(err);
          }
          return res.json(artist);
        });
      }
    },
    show: function(req, res, next){
      var population;
      if (_.isNaN(req.params.id)) {
        return res.sendStatus(400);
      }
      population = [
        {
          path: 'events._event'
        }, {
          path: 'images._image'
        }
      ];
      return Artist.findOne({
        id: req.params.id
      }).populate(population).exec(function(err, artist){
        if (err) {
          return next(err);
        }
        if (!artist) {
          return res.sendStatus(404);
        }
        return res.json(artist);
      });
    },
    remove: function(req, res, next){
      var hide, destroy;
      hide = function(id, done){
        return Artist.findOneAndUpdate({
          id: id
        }, {
          hidden: true
        }, {
          upsert: true
        }, function(err, data){
          if (err) {
            return next(err);
          }
          return done(data);
        });
      };
      return destroy = function(id, done){
        return Artist.remove({
          id: id
        }).exec(function(err, artist){
          if (err) {
            return next(err);
          }
          return done(artist);
        });
      };
    },
    update: function(req, res, next){
      var findCreateUpdateLabel;
      if (isNaN(req.params.id)) {
        return res.sendStatus(400);
      }
      Artist.findOneAndUpdate({
        id: req.params.id
      }, req.body, {
        upsert: true
      }, function(err, artist){
        if (err) {
          return next(err);
        }
        if (req.body.label) {
          return findCreateUpdateLabel(artist, req.body.label.name);
        } else {
          return res.sendStatus(200);
        }
      });
      return findCreateUpdateLabel = function(artist, labelName){
        return Label.findOne({
          name: labelName,
          artists: {
            $elemMatch: {
              _artist: artist.id
            }
          }
        }, function(err, label){
          switch (false) {
          case !(label && label.artists.length):
            return res.sendStatus(200);
          case !(label && !label.artists.length):
            return Label.update({
              id: label.id,
              $push: {
                'artists': {
                  _artist: artist.id,
                  name: artist.name
                }
              }
            }, function(err, numAffected, rawResponse){
              return res.sendStatus(200);
            });
          case !!label:
            return label = new Label({
              name: req.body.label.name,
              permalink: req.body.label.name,
              artists: [{
                _artist: artist.id,
                name: artist.name
              }]
            }).save(function(err, label){
              if (err) {
                throw err;
              }
              return res.sendStatus(200);
            });
          }
        });
      };
    }
  };
}).call(this);
